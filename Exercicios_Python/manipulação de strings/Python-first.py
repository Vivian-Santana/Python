'''
As fun√ß√µes incorporadas, ao contr√°rio das fun√ß√µes definidas pelo usu√°rio, est√£o sempre dispon√≠veis e n√£o precisam ser importadas.
Para chamar uma fun√ß√£o (este processo √© conhecido como chamada de fun√ß√£o ou invoca√ß√£o de fun√ß√£o), voc√™ precisa usar o nome da fun√ß√£o seguido de par√™nteses. 
Voc√™ pode passar argumentos para uma fun√ß√£o colocando-os dentro dos par√™nteses. Voc√™ deve separar os argumentos com uma v√≠rgula, por exemplo, print("Ol√°,", "world!").
Um print() vazio imprime uma linha vazia na tela. 
O Python 3.8 vem com 69 fun√ß√µes integradas. Voc√™ pode encontrar a lista completa fornecida em ordem alfab√©tica na Python Standard Library.
Strings no Python s√£o delimitadas por aspas, por exemplo, "eu sou um barbante" (aspas duplas), ou 'eu sou um barbante, demasiado' (aspas simples).
Em Strings do Python a barra invertida (\) √© um caracter especial que anuncia que o pr√≥ximo caracter ter√° um significado diferente, por exemplo, 
\n (o caracter de nova linha) inicia uma nova linha de sa√≠da.
Argumentos posicionais s√£o aqueles cujo significado √© ditado por sua posi√ß√£o, por exemplo, o segundo argumento √© gerado ap√≥s o primeiro, o terceiro √© gerado ap√≥s o segundo, etc.
Argumentos de palavras-chave s√£o aqueles cujo significado n√£o √© ditado por sua localiza√ß√£o, mas por uma palavra especial (palavra-chave) usada para identific√°-los.
Os par√¢metros end e sep podem ser utilizadas para formatar a sa√≠da do print(). O par√¢metro sep especifica o separador entre os argumentos de sa√≠da, por exemplo, 
print("H", "E", "L", "L", "O", sep="-"), enquanto o par√¢metro end especifica o que imprimir no final da impress√£o.
'''

print("Hello world!")
print()
print("A pequenina aranha escalou a tromba d'√°gua.")
print("Caiu a chuva e lavou a aranha.")
print()

print("A aranha pequenininha\nsubiu a tromba d'√°gua.")
print()
print("abaixo veio a chuva\ne lavou a aranha.")
print()

print("A aranha pequenininha\nsubiu a tromba d'√°gua.\n")
print("abaixo veio a chuva\ne lavou a aranha.")
print()

print("A aranha pequenininha" , "subiu" , "a tromba d'√°gua.")
print()

print("Meu nome √©", "Python.")
print("Monty Python.")
print()

print("Meu nome √©", "Python.", end=" ")
print("Monty Python.")
print()

print("Meu nome √© ", end="")
print("Monty Python.")
print()

print("Meu", "nome", "√©", "Monty", "Python.", sep="-")
print("Meu", "nome", "√©", "Monty", "Python.", sep="‚ù§Ô∏è")
print()

print("Meu", "nome", "√©", "Monty", "Python.", sep="-")
print()

print("Meu", "nome", "√©", sep="_", end="*")
print("Monty", "Python.", sep="*", end="*\n")
print()

print("Programa√ß√£o","Essenciais","em", sep="***", end="...")
print("Python")

print("ü§©" *2)
print ("aprendendo python \n" *2)
print()

print('oi')
print(" *")
print(" * *")
print(" * *")
print(" * *")
print("*** ***")
print(" * *")
print(" * *")
print(" *****")

print()

print("Meu\nnome\n√©\nBond.", end=" ")
print("James Bond.")
 
print()

print("peixe", "salgadinhos", sep="\t&\t")#Lembre-se: Os argumentos de palavras-chave devem ser passados ap√≥s quaisquer argumentos posicionais obrigat√≥rios.

print('Greg\'s book.')
print("'Greg's book.'")
print('"Greg\'s book."')
print("Greg\'s book.")
#print('"Greg's book."') #A linha 5 gerar√° SyntaxError, porque o s√≠mbolo ' no Greg's book. string requer um caractere de escape.
print("\nliterais em Python.")

'''
Tomemos, por exemplo, o n√∫mero onze milh√µes cento e onze mil cento e onze. Se voc√™ pegasse um l√°pis na m√£o agora, 
escreveria o n√∫mero assim: 11,111,111, ou assim: 11.111.111, ou at√© mesmo assim: 11 111 111.

√â claro que essa disposi√ß√£o facilita a leitura, especialmente quando o n√∫mero consiste em muitos d√≠gitos. 
No entanto, o Python n√£o aceita coisas como essas. √â proibido. O que o Python permite, por√©m, √© o uso de sublinhados em literais num√©ricos.*

Portanto, voc√™ pode escrever este n√∫mero da seguinte forma: 11111111 ou desta forma: 11_111_111.

Observa√ß√£o     *O Python 3.6 introduziu sublinhados em literais num√©ricos, permitindo a coloca√ß√£o de 
sublinhamentos √∫nicos entre d√≠gitos e especificadores de base para melhorar a legibilidade. 
Esse recurso n√£o est√° dispon√≠vel em vers√µes mais antigas do Python.

E como codificamos n√∫meros negativos em Python? Como de costume - adicionando um sinal de menos. 
Voc√™ pode escrever: -11111111 ou -11_111_111.

Os n√∫meros positivos n√£o precisam ser precedidos pelo sinal de mais, mas √© permitido, se voc√™ quiser fazer isso. 
As seguintes linhas descrevem o mesmo n√∫mero: +11111111 e 11111111.
 
N√∫meros octais e hexadecimais:
H√° duas conven√ß√µes adicionais em Python que s√£o desconhecidas para o mundo da matem√°tica. 
A primeira nos permite usar n√∫meros em uma representa√ß√£o octal.

Se um n√∫mero inteiro for precedido por um prefixo 0O ou 0o (zero-o), ele ser√° tratado como um valor octal. 
Isso significa que o n√∫mero deve conter d√≠gitos retirados apenas do intervalo [0..7].

0o123 √© um n√∫mero octal com um valor (decimal) igual a 83.
'''

# A fun√ß√£o print() faz a convers√£o automaticamente. Tente isto:
print(0o123)

print()
'''
A segunda conven√ß√£o nos permite usar n√∫meros hexadecimais. Esses n√∫meros devem ser precedidos pelo prefixo 0x ou 0X (zero-x).
0x123 √© um n√∫mero hexadecimal com um valor (decimal) igual a 291. A fun√ß√£o print() tamb√©m pode gerenciar esses valores. Tente isto:
'''
print(0x123)
print("\nPonto flutuante")
'''
Nota: dois e meio parecem normais quando voc√™ o escreve em um programa, embora se o seu idioma nativo preferir usar v√≠rgula 
em vez de um ponto no n√∫mero, voc√™ deve garantir que seu n√∫mero n√£o contenha nenhuma v√≠rgula.

O Python n√£o aceitar√° isso, ou (em casos muito raros, mas poss√≠veis) pode interpretar mal suas inten√ß√µes, 
pois a pr√≥pria v√≠rgula tem seu pr√≥prio significado reservado em Python.
'''
print(2.5)
print()
'''
# Por outro lado, n√£o s√£o apenas os pontos que fazem um float. Voc√™ tamb√©m pode usar a letra e.

# Quando voc√™ quiser usar n√∫meros muito grandes ou muito pequenos, use nota√ß√£o cient√≠fica.

# Veja, por exemplo, a velocidade da luz, expressa em metros por segundo. Escrito diretamente, ficaria assim: 300000000.

# Para evitar escrever tantos zeros, os livros de f√≠sica usam uma forma abreviada, que voc√™ provavelmente j√° viu: 3 x 108.

# Diz: Tr√™s vezes dez √† pot√™ncia de oito.

# Em Python, o mesmo efeito √© obtido de uma maneira ligeiramente diferente - veja:

# 3E8

# A letra E (voc√™ tamb√©m pode usar a letra min√∫scula e - vem da palavra expoente) √© um registro conciso da frase vezes dez √† pot√™ncia de.
'''

'''
# Nota:
# o expoente (o valor ap√≥s o E) tem que ser um n√∫mero inteiro;
# a base (o valor na frente do E) pode ser um n√∫mero inteiro ou um valor flutuante.
'''
print(3e8)
print()
'''
Codifica√ß√£o de flutuantes
Vamos ver como essa conven√ß√£o √© usada para registrar n√∫meros muito pequenos (no sentido de seu valor absoluto, que √© pr√≥ximo de zero).

Uma constante f√≠sica chamada constante de Planck (e indicada como h), de acordo com os livros did√°ticos, tem o valor de: 6,62607 x 10-34.

Se voc√™ gostaria de us√°-lo em um programa, escreva desta forma:

6.62607E-34

Nota: o fato de voc√™ ter escolhido uma das formas poss√≠veis de codifica√ß√£o de valores flutuantes n√£o significa que o Python a apresentar√° da mesma forma.

√Äs vezes, o Python pode escolher uma nota√ß√£o diferente da sua.

Por exemplo, digamos que voc√™ decidiu usar o seguinte literal de flutua√ß√£o:

0.0000000000000000000001

Quando voc√™ executa esse literal pelo Python:
'''
print(0.0000000000000000000001)

'''
Output
esse √© o resultado:
1e-22
Output
O Python sempre escolhe a forma mais econ√¥mica de apresenta√ß√£o do n√∫mero, e voc√™ deve levar isso em considera√ß√£o ao criar literais.
'''
print()
#ADS aula 2 tema 4: manipula√ß√£o avan√ßada com strings
print('*** Manipula√ß√£o de strings ***')
print('Concatenando strings:')
s1 = 'Logica de programa√ß√£o'
s1 = s1 + ' e Algoritmos'
print(s1)

print()

string = 'A' + '-' * 10 + 'B' # multiplicar a '-' por 10 vai imorimir - dez vezes.
print(string)
print()

print('Composi√ß√£o = juntar string com vari√°veis:')
nota = 8.5
s3 = 'Voce tirou %f na disciplina de Algoritmos' % nota
print(s3)

#limitando as casas decimais q aparecem depois do 5
nota = 8.5
s4 = 'Voce tirou %.2f na disciplina de Algoritmos' % nota
print(s4)

print()

print('concatena√ß√£o com v√°rias vari√°veis:')
nota = 8.5
disciplina = 'Algoritmos'
s5 = 'Voce tirou %.1f na disciplina de %s' % (nota, disciplina)
print(s5)

print()

print ('composi√ß√£o moderna:')
nota = 8.5
disciplina = 'Algoritmos'
s6 = 'Voce tirou {} na disciplina de {}' .format(nota, disciplina)
print(s6)

print()

print('Fatiamento de string:')
s7 = 'L√≥gica de programa√ß√£o e algoritmos'
print(s7[0:6])# essa delimita√ß√£o pega do caractere 0 at√© o 5.
print(s7[24:34])
print(s7[:6]) # se n√£o colocar um delimitador antes dos : ele vai pegar td a partir do in√≠cio at√© onde delimitei o fim.

print()

print('Tamanho (length):') # saber o tamanho da string
s8 = 'L√≥gica de programa√ß√£o e algoritmos'
tamanho = len(s8)
print(tamanho)

'''
tema 5: Fun√ß√£o de entrada e fluxo de execu√ß√£o do programa
idade = input('Qual sua idade?')
print(idade)

print()

nome = input('Qual √© o seu nome?')
print('Ol√° {}, seja bem-vindo(a)!'.format(nome))

print()
print('Convertendo dados de entrada:')
nota2 = float(input('Qual nota voc√™ recebeu na disciplina? '))
print('Voc√™ tirou a nota {}.' .format(nota2))
'''
print()
#Exercicio
x = int(input('Digite um n√∫mero inteiro: '))
y = int(input('Digite outro n√∫mero inteiro: '))
print('\n Maneira cl√°ssica:')
res = 'O resultado da soma de %i com %i √© %i.' % (x, y, x+y)
print(res)

print()
print('Maneira moderna:')
res = 'O resultado da soma de {} com {} √© {}.' .format(x, y, x+y)
print(res)

print()
